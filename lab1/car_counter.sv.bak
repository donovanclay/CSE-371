module car_counter(
	input logic clk, reset, incr, decr,
	output [4:0] count
	);
	
	logic [4:0] ps, ns;
	
	always_ff @(posedge clk)
		if (reset) ps <= 5'b0;
		else if (incr && decr) ps <= ps;
		else if (incr) ps <= ps + 1;
		else if (decr) ps <= ps-1;
		else ps <= ps;
	
endmodule
	
	
module car_counter_tb()
	logic clk, reset, incr, decr;
	logic [4:0] count;
	
	car_counter dut(clk, reset, incr, decr, count);
	
	// Set up the clock
	parameter CLOCK_PERIOD=100;
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD/2) clk <= ~clk;
	end
	
	// Set up the inputs to the design. Each line is a clock cycle.
	initial begin
		reset <= 1; 	incr <= 1'b00; 	decr <= 1'b00 	@(posedge clk);
		reset <= 0; 	incr <= 1'b01; 	decr <= 1'b00 	@(posedge clk);
																		@(posedge clk);
																		@(posedge clk);
																		@(posedge clk);
																		@(posedge clk);
		$stop;  // pause the simulation
	end
	
	
endmodule 