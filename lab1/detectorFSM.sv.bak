module detectorFSM(
	input  logic clk, reset, outer, inner,
	output logic enter, exit
	);
	
	logic [2:0] ps, ns;
	logic [1:0] sensors;
	
	assign sensors = {outer, inner};
	
	parameter S0 = 3'b000;
	parameter S1 = 3'b001;
	parameter S2 = 3'b010;
	parameter S3 = 3'b011;
	parameter S4 = 3'b100;
	parameter S5 = 3'b101;
	parameter S6 = 3'b110;
	
	always_comb
		case(ps)
			S0: 	if (sensors == 2'b10) ns = S1;
					else if (sensors == 2'b01) ns = S4;
					else ns = S0;
			S1: 	if (sensors == 2'b11) ns = S2;
					else if (sensors == 2'b10) ns = S1;
					else ns = S0;
			S2: 	if (sensors == 2'b00) ns = S0;
					else if (sensors == 2'b01) ns = S3;
					else if (sensors == 2'b10) ns = S1;
					else ns = S2;
			S3: 	if (sensors == 2'b00 || sensors == 2'b10) ns = S0;
					else if (sensors == 2'b01) ns = S3;
					else ns = S2;
			S4: 	if (sensors == 2'b00 || sensors == 2'b10) ns = S0;
					else if (sensors == 2'b01) ns = S4;
					else ns = S5;
			S5:	if (sensors == 2'b00) ns = S0;
					else if (sensors == 2'b01) ns = S4;
					else if (sensors == 2'b10) ns = S6;
					else ns = S5;
			S6		if (sensors == 2'b00 || sensors == 2'b01) ns = S0;
					else if (sensors == 2'b10) ns = S6;
					else ns = S5;
		endcase
			
		assign enter = (ps == S3 && sensors == 2'b00) ? 1'b1 : 1'b0;
		assign exit = (ps == S6 && sensors == 2'b00) ? 1'b1 : 1'b0;
		
	always_ff @(posedge clk)
		if (reset)
			ps <= S0;
		else 
			ps <= ns;
	
endmodule 
	