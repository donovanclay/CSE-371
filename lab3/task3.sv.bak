module task3 (CLOCK_50, CLOCK2_50, KEY, SW, FPGA_I2C_SCLK, FPGA_I2C_SDAT, AUD_XCK, 
		        AUD_DACLRCK, AUD_ADCLRCK, AUD_BCLK, AUD_ADCDAT, AUD_DACDAT);

	input CLOCK_50, CLOCK2_50;
	input [0:0] KEY;
    input [9:0] SW;
	// I2C Audio/Video config interface
	output FPGA_I2C_SCLK;
	inout FPGA_I2C_SDAT;
	// Audio CODEC
	output AUD_XCK;
	input AUD_DACLRCK, AUD_ADCLRCK, AUD_BCLK;
	input AUD_ADCDAT;
	output AUD_DACDAT;
	
	// Local wires.
	wire read_ready, write_ready, read, write;
	wire [23:0] readdata_left, readdata_right;
	wire [23:0] writedata_left, writedata_right;
	wire reset = ~KEY[0];

	/////////////////////////////////
	// Your code goes here 
	/////////////////////////////////
	logic filter_on, which_audio;
	logic [15:0] addr;
	logic [23:0] data_out, rom_out, filter_in_left, filter_in_right, 
                 filter_out_left, filter_out_right;

    assign filter_on = SW[8];
    assign which_audio = SW[9];
	
	addr_counter count1 (CLOCK_50, reset, read, addr);
	
	note_rom my_note_rom (addr, CLOCK_50, rom_out);

    assign filter_in_left = (which_audio) ? rom_out : readdata_left;
    assign filter_in_right = (which_audio) ? rom_out : readdata_right;

    logic enable;
    assign enable = write_ready && read_ready;

    FIR_filter #(64) my_filter_left (CLOCK_50, reset, enable, filter_in_left,
                               filter_out_left);
    FIR_filter #(64) my_filter_right (CLOCK_50, reset, enable, filter_in_right,
                                filter_out_right);
	
	assign writedata_left = (filter_on) ? filter_out_left : filter_in_left;
	assign writedata_right = (filter_on) ? filter_out_right : filter_in_right;
	assign read = write_ready && read_ready;
	assign write = write_ready && read_ready;
	
/////////////////////////////////////////////////////////////////////////////////
// Audio CODEC interface. 
//
// The interface consists of the following wires:
// read_ready, write_ready - CODEC ready for read/write operation 
// readdata_left, readdata_right - left and right channel data from the CODEC
// read - send data from the CODEC (both channels)
// writedata_left, writedata_right - left and right channel data to the CODEC
// write - send data to the CODEC (both channels)
// AUD_* - should connect to top-level entity I/O of the same name.
//         These signals go directly to the Audio CODEC
// I2C_* - should connect to top-level entity I/O of the same name.
//         These signals go directly to the Audio/Video Config module
/////////////////////////////////////////////////////////////////////////////////
	clock_generator my_clock_gen(
		// inputs
		CLOCK2_50,
		reset,

		// outputs
		AUD_XCK
	);

	audio_and_video_config cfg(
		// Inputs
		CLOCK_50,
		reset,

		// Bidirectionals
		FPGA_I2C_SDAT,
		FPGA_I2C_SCLK
	);

	audio_codec codec(
		// Inputs
		CLOCK_50,
		reset,

		read,	write,
		writedata_left, writedata_right,

		AUD_ADCDAT,

		// Bidirectionals
		AUD_BCLK,
		AUD_ADCLRCK,
		AUD_DACLRCK,

		// Outputs
		read_ready, write_ready,
		readdata_left, readdata_right,
		AUD_DACDAT
	);

endmodule   // task3
